/*
 * @Name: 折线图集静态数据
 * @Description: 描述信息
 * @Author: biubiu
 * @Date: 2024-07-17
*/

import line1Img from "@/assets/image/chartExample/line/line1.png";
import line2Img from "@/assets/image/chartExample/line/line2.png";
import line3Img from "@/assets/image/chartExample/line/line3.png";
import line4Img from "@/assets/image/chartExample/line/line4.png";
import line5Img from "@/assets/image/chartExample/line/line5.png";
import line6Img from "@/assets/image/chartExample/line/line6.png";
import line7Img from "@/assets/image/chartExample/line/line7.png";
import line8Img from "@/assets/image/chartExample/line/line8.png";
import line9Img from "@/assets/image/chartExample/line/line9.png";
import line10Img from "@/assets/image/chartExample/line/line10.png";
import line11Img from "@/assets/image/chartExample/line/line11.png";
import line12Img from "@/assets/image/chartExample/line/line12.png";

export const LineChartData = [
  {
    id: "line12",
    name: "年龄架构",
    type: ["line"],
    date: "2025.04.18",
    exampleImg: line12Img,
    remark: "平均值",
    renderer: "svg",
    code: "const nameList = ['2017', '2018', '2019', '2020', '2021'];\nconst valueList = [\n  ['81', '65', '76', '84', '49'],\n  ['71', '71', '71', '71', '71']\n];\nconst typeList = ['人数', '平均年龄'];\nconst yNameList = ['人', '岁'];\nconst unitList = ['人', '岁'];\n\n/*数据整合*/\n// y轴\nconst yAxisData = [];\nyNameList.map((item, index) => {\n  yAxisData.push({\n    type: 'value',\n    name: item,\n    alignTicks: true,\n    nameTextStyle: {\n      color: '#000000',\n      fontSize: 12,\n      fontFamily: 'Source Han Sans CN-Regular',\n      align: index === 0 ? 'left' : 'right',\n      verticalAlign: 'center'\n    },\n    axisLabel: {\n      color: '#000000',\n      textStyle: {\n        fontSize: 12\n      }\n    },\n    axisLine: {\n      show: true,\n      lineStyle: {\n        color: '#D9D9D9'\n      }\n    },\n    axisTick: {\n      show: false\n    },\n    splitLine: {\n      lineStyle: {\n        color: '#E8E8E8'\n      }\n    }\n  });\n});\n// series\nconst seriesData = [];\nconst legendData = [];\nconst lineStyle = [\n  { symbol: \"circle\", type: \"solid\", color: '#1890FF', shadowColor: 'rgba(57, 126, 240, 0.58)' },\n  { symbol: \"none\", type: \"dashed\", color: '#FFC329', shadowColor: 'rgba(255, 195, 41, 0.30)' }\n];\ntypeList.map((item, index) => {\n  seriesData.push({\n    name: item,\n    type: 'line',\n    data: valueList[index],\n    symbol: lineStyle[index].symbol,\n    symbolSize: 10,\n    yAxisIndex: index,\n    lineStyle: {\n      type: lineStyle[index].type,\n      color: lineStyle[index].color,\n      width: 2,\n      shadowColor: lineStyle[index].shadowColor,\n      shadowBlur: 6,\n      shadowOffsetY: 3\n    },\n    itemStyle: {\n      color: \"#FFFFFF\",\n      borderColor: lineStyle[index].color,\n      borderWidth: 2\n    },\n    emphasis: {\n      scale: 1.5\n    }\n  });\n  legendData.push({\n    name: item,\n    \n  })\n});\n\noption = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'line',\n      lineStyle: {\n        color: \"rgba(24,144,255,0.85)\",\n        width: 2\n      },\n    },\n    confine: true,\n    formatter: (params) => {\n      const { name, data } = params[0];\n      return `\n            <div style=\"font-size: 15px;font-family: Source Han Sans CN-Medium;font-weight: 500;color: #1890FF\">${data}${unitList[0]}</div>\n      `;\n    },\n    extraCssText:\n      'background-color:#FFFFFF;padding:6px 16px;box-shadow: 0px 7px 19px -6px rgba(58,77,233,0.15);border-radius: 7px;border:1px solid #E4E4E9;'\n  },\n  legend: {\n    data: typeList,\n    top: '0',\n    right: '0',\n    itemWidth: 33,\n    itemHeight: 12,\n    itemGap: 24,\n    textStyle: {\n      fontSize: 14,\n      color: 'rgba(0, 0, 0, 0.85)',\n      fontFamily: 'Source Han Sans CN-Regular',\n      padding: [0, 0, 0, 4]\n    }\n  },\n  grid: {\n    top: '56',\n    right: '2',\n    left: '0',\n    bottom: '0',\n    containLabel: true\n  },\n  xAxis: {\n    type: 'category',\n    data: nameList,\n    axisTick: {\n      show: false //隐藏X轴刻度\n    },\n    axisLine: {\n      lineStyle: {\n        color: '#D9D9D9'\n      }\n    },\n    axisLabel: {\n      show: true,\n      textStyle: {\n        color: '#000000',\n        fontSize: 12,\n        fontFamily: 'Source Han Sans CN-Regular'\n      }\n    }\n  },\n  yAxis: yAxisData,\n  series: seriesData\n};"
  },
  {
    id: "line11",
    name: "季度风险漏洞通知趋势",
    type: ["line"],
    date: "2024.12.17",
    exampleImg: line11Img,
    remark: "多折线，轮播",
    renderer: "svg",
    code: "const nameList = ['第一季度', '第二季度', '第三季度', '第四季度'];\nconst valueList = [\n  [15, 10, 12, 11],\n  [16, 18, 13, 12],\n  [14, 12, 10, 10]\n];\nconst typeList = [\n  '信息系统(网站)安全漏洞整改通知书',\n  '网络安全风险告知书',\n  '不良信息风险告知书'\n];\nconst unit = '项';\nconst yName = '项目(项)';\n// 开启轮播\nconst carouselOpen = true;\n\n/* 样式 */\nconst colorList = [\n  'rgba(38, 138, 255',\n  'rgba(30, 214, 255',\n  'rgba(243, 118, 120'\n];\n/* 数据整合 */\nlet seriesData = [];\ntypeList.map((typeItem, typeIndex) => {\n  seriesData.push({\n    name: typeItem,\n    type: 'line',\n    z: 2,\n    data: valueList[typeIndex],\n    symbolSize: 6,\n    symbol: 'circle',\n    yAxisIndex: 0,\n    lineStyle: {\n      color: `${colorList[typeIndex]}, 1)`,\n      width: 2\n    },\n    itemStyle: {\n      color: `${colorList[typeIndex]}, 1)`,\n      borderColor: `${colorList[typeIndex]}, 0.2)`,\n      borderWidth: 6\n    },\n    emphasis: {\n      scale: 1.2\n    }\n  });\n});\n// 获取最大值\nlet valueMax = Math.max(...valueList.flat(Infinity));\n// 添加背景柱\nseriesData.push({\n  name: 'bgBar',\n  type: 'bar',\n  yAxisIndex: 1,\n  z: 1,\n  data: nameList.map((item) => {\n    return {\n      value: valueMax + 0.2 * valueMax,\n      itemStyle: {\n        color: 'rgba(57,126,240,0)'\n      }\n    };\n  })\n});\n\noption = {\n  backgroundColor: '#071a42',\n  legend: {\n    data: typeList,\n    top: '0',\n    left: '0',\n    icon: 'roundRect',\n    itemWidth: 12,\n    itemHeight: 12,\n    itemGap: 16,\n    textStyle: {\n      fontSize: 12,\n      color: '#EBF6FF',\n      fontFamily: 'Source Han Sans CN-Regular'\n    }\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'none'\n    },\n    confine: true,\n    formatter: (params) => {\n      const { name } = params[0];\n      let childDiv = `<div style=\"display: flex;flex-direction: column;gap: 2px 0;\">`;\n      params.map((childItem, childIndex) => {\n        if (childItem['seriesName'] !== 'bgBar') {\n          childDiv += `<div style=\"display: flex;align-items: center;gap: 0 4px;\">\n            <div style=\"width: 6px;height: 6px;border-radius: 50%;border: 2px solid ${colorList[childIndex]},1);\"></div>\n             <div style=\"font-family: Source Han Sans CN-Regular;font-weight: 400;font-size: 14px;color: #FFFFFF;\">${childItem['seriesName']}:</div>\n            <div style=\"margin-left: 2px;font-family: Source Han Sans CN-Regular;font-weight: 400;font-size: 14px;color: #FFFFFF;\">${childItem['value']}${unit}</div>\n          </div>`;\n        }\n      });\n      childDiv += `</div>`;\n      return `\n        <div style=\"font-size: 14px;font-family: Source Han Sans CN-Regular;font-weight: 400;color: #FFFFFF;margin-bottom:4px;\">${name}</div>\n        ${childDiv}\n      `;\n    },\n    extraCssText:\n      'background-color:rgba(0,13,35,0.9);padding:8px 12px;box-shadow: 1px 6px 15px 1px rgba(0,0,0,0.13);border-radius: 4px;border:none;'\n  },\n  grid: {\n    top: '56',\n    right: '0',\n    left: '0',\n    bottom: '0',\n    containLabel: true\n  },\n  xAxis: [\n    {\n      type: 'category',\n      data: nameList,\n      axisTick: { show: false },\n      axisLine: {\n        lineStyle: {\n          color: 'rgba(62, 102, 181, 1)'\n        }\n      },\n      axisLabel: {\n        show: true,\n        margin: 12,\n        interval: 0,\n        textStyle: {\n          fontSize: 12,\n          color: '#ABC6F7', //X轴文字颜色\n          fontFamily: 'Source Han Sans CN-Regular',\n          fontWeight: 400\n        }\n      }\n    },\n    {\n      type: 'category',\n      data: nameList,\n      axisTick: { show: false },\n      axisLine: { show: false },\n      axisLabel: { show: false }\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value',\n      name: yName,\n      boundaryGap: ['0', '10%'],\n      nameTextStyle: {\n        fontSize: 12,\n        color: '#ABC6F7', //X轴文字颜色\n        fontFamily: 'Source Han Sans CN-Regular',\n        align: 'left',\n        verticalAlign: 'center'\n      },\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        lineStyle: {\n          type: 'dashed',\n          width: 1,\n          color: '#3E66B5'\n        }\n      },\n      axisLine: {\n        show: false\n      },\n      axisLabel: {\n        show: true,\n        fontSize: 12,\n        color: '#ABC6F7',\n        fontFamily: 'HarmonyOS Sans-Regular'\n      },\n      splitArea: {\n        show: false\n      }\n    },\n    {\n      boundaryGap: ['0', '10%'],\n      position: 'right',\n      max: valueMax + 0.2 * valueMax,\n      type: 'value',\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        show: false\n      },\n      axisLine: {\n        show: false\n      },\n      axisLabel: {\n        show: false\n      },\n      splitArea: {\n        show: false\n      }\n    }\n  ],\n  series: seriesData\n};\n/*轮播*/\nif (carouselOpen) {\n  let count = 0;\n  let dataLength = option.series[0].data.length;\n  let timer = null;\n\n  // 定时轮播\n  timer = setInterval(() => {\n    const currentIndex = count % dataLength;\n    myChart.dispatchAction({\n      type: 'downplay',\n      seriesIndex: [0, 1]\n    });\n    myChart.dispatchAction({\n      type: 'highlight',\n      seriesIndex: [0, 1],\n      dataIndex: currentIndex\n    });\n    myChart.dispatchAction({\n      type: 'showTip',\n      seriesIndex: 0,\n      dataIndex: currentIndex\n    });\n    myChart.setOption({\n      series: [\n        {\n          name: 'bgBar',\n          data: nameList.map((item, index) => {\n            if (index === currentIndex) {\n              return {\n                value: valueMax + 0.2 * valueMax,\n                itemStyle: {\n                  color: 'rgba(57,126,240,0.2)'\n                }\n              };\n            } else {\n              return {\n                value: valueMax + 0.2 * valueMax,\n                itemStyle: {\n                  color: 'rgba(57,126,240,0)'\n                }\n              };\n            }\n          })\n        }\n      ]\n    });\n    count++;\n  }, 3 * 1000);\n  // 鼠标移入\n  myChart.on('mouseover', (params) => {\n    clearInterval(timer);\n    const currentIndex = params.dataIndex;\n    myChart.dispatchAction({\n      type: 'downplay',\n      seriesIndex: [0, 1]\n    });\n    myChart.dispatchAction({\n      type: 'highlight',\n      seriesIndex: [0, 1],\n      dataIndex: currentIndex\n    });\n    myChart.dispatchAction({\n      type: 'showTip',\n      seriesIndex: 0,\n      dataIndex: currentIndex\n    });\n    myChart.setOption({\n      series: [\n        {\n          name: 'bgBar',\n          data: nameList.map((item, index) => {\n            if (index === currentIndex) {\n              return {\n                value: valueMax + 0.2 * valueMax,\n                itemStyle: {\n                  color: 'rgba(57,126,240,0.2)'\n                }\n              };\n            } else {\n              return {\n                value: valueMax + 0.2 * valueMax,\n                itemStyle: {\n                  color: 'rgba(57,126,240,0)'\n                }\n              };\n            }\n          })\n        }\n      ]\n    });\n  });\n  // 鼠标移出\n  myChart.on('mouseout', (params) => {\n    clearInterval(timer);\n    count = params.dataIndex + 1;\n    myChart.setOption({\n      series: [\n        {\n          name: 'bgBar',\n          data: nameList.map((item, index) => {\n            return {\n              value: valueMax + 0.2 * valueMax,\n              itemStyle: {\n                color: 'rgba(57,126,240,0)'\n              }\n            };\n          })\n        }\n      ]\n    });\n    timer = setInterval(() => {\n      const currentIndex = count % dataLength;\n      myChart.dispatchAction({\n        type: 'downplay',\n        seriesIndex: [0, 1]\n      });\n      myChart.dispatchAction({\n        type: 'highlight',\n        seriesIndex: [0, 1],\n        dataIndex: currentIndex\n      });\n      myChart.dispatchAction({\n        type: 'showTip',\n        seriesIndex: 0,\n        dataIndex: currentIndex\n      });\n      myChart.setOption({\n        series: [\n          {\n            name: 'bgBar',\n            data: nameList.map((item, index) => {\n              if (index === currentIndex) {\n                return {\n                  value: valueMax + 0.2 * valueMax,\n                  itemStyle: {\n                    color: 'rgba(57,126,240,0.2)'\n                  }\n                };\n              } else {\n                return {\n                  value: valueMax + 0.2 * valueMax,\n                  itemStyle: {\n                    color: 'rgba(57,126,240,0)'\n                  }\n                };\n              }\n            })\n          }\n        ]\n      });\n      count++;\n    }, 3 * 1000);\n  });\n}"
  },
  {
    id: "line10",
    name: "近7日访问量趋势",
    type: ["line"],
    date: "2024.12.17",
    exampleImg: line10Img,
    remark: "单折线，区域块轮播",
    renderer: "svg",
    code: "const nameList = [\n  '10.31',\n  '10.30',\n  '10.29',\n  '10.28',\n  '10.27',\n  '10.26',\n  '10.25'\n];\nconst valueList = [290, 350, 400, 380, 320, 340, 300];\nconst yName = '访问量(次)';\nconst unit = '次';\nconst showNum = 5;\n// 开启轮播\nconst carouselOpen = true;\n\n/*数据整合*/\nlet seriesData = [];\nseriesData.push({\n  name: 'line',\n  yAxisIndex: 0,\n  type: 'line',\n  silent: true,\n  z: 2,\n  data: valueList,\n  symbolSize: 6,\n  lineStyle: {\n    color: 'rgba(57, 126, 240, 1)',\n    width: 2\n  },\n  itemStyle: {\n    color: 'rgba(57, 126, 240, 1)',\n    borderColor: 'rgba(57, 126, 240, 1)',\n    borderWidth: 1\n  },\n  areaStyle: {\n    color: {\n      type: 'linear',\n      x: 0,\n      y: 0,\n      x2: 0,\n      y2: 1,\n      colorStops: [\n        {\n          offset: 0,\n          color: 'rgba(0, 117, 255, 0.3)'\n        },\n        {\n          offset: 1,\n          color: 'rgba(0, 117, 255, 0)'\n        }\n      ],\n      global: false\n    }\n  },\n  label: {\n    show: true,\n    z: 3,\n    position: 'top',\n    opacity: 0.6,\n    backgroundColor: '#001435',\n    offset: [0, -8],\n    borderRadius: 2,\n    fontSize: 12,\n    color: 'rgba(57, 126, 240, 1)',\n    fontFamily: 'Source Han Sans CN-Regular',\n    padding: [4, 2, 2, 2]\n  },\n  emphasis: {\n    scale: 2,\n    itemStyle: {\n      borderWidth: 3\n    },\n    label: {\n      opacity: 1,\n      fontSize: 14,\n      color: '#ABC6F7',\n      fontFamily: 'Source Han Sans CN-Regular',\n      padding: [4, 2, 2, 2]\n    }\n  }\n});\n// 获取最大值\nlet valueMax = 0;\nvalueList.map((item) => {\n  if (Number(item) > valueMax) {\n    valueMax = Number(item);\n  }\n});\n// 添加背景柱\nseriesData.push({\n  name: 'bgBar',\n  type: 'bar',\n  yAxisIndex: 1,\n  z: 1,\n  data: nameList.map((item) => {\n    return {\n      value: valueMax + 0.2 * valueMax,\n      itemStyle: {\n        color: 'rgba(57,126,240,0)'\n      }\n    };\n  })\n});\nlet bottom = 0;\nlet dataZoomShow = false;\nif (nameList.length > showNum) {\n  bottom = 20;\n  dataZoomShow = true;\n}\n\noption = {\n  backgroundColor: '#071a42',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'none',\n      shadowStyle: {\n        color: ' rgba(57,126,240,0.2)'\n      }\n    },\n    confine: true,\n    formatter: (params) => {\n      let currenrName = params[0].name;\n      return `\n\t\t\t\t    <div style=\"font-size: 12px;font-family: Source Han Sans CN-Medium;font-weight: 500;color: #FFFFFF;margin-bottom:4px;\">${currenrName}</div>\n            <div style=\"margin-top: 4px;position:relative;\">\n              <div style=\"width: 6px;height: 6px;background: #FFFFFF;border: 3px solid rgba(57, 126, 240, 1);position:absolute;top:50%;transform:translateY(-50%);left:0;border-radius:50%;\"></div>\n              <span style=\"margin:0 0 0 20px;font-size: 12px;font-family: Source Han Sans CN-Regular;font-weight: 400;color: #FFFFFF;\">当日访问量：${params[0].value}${unit}</span>\n            </div>\n\t\t\t    `;\n    },\n    extraCssText:\n      'background-color:rgba(0,13,35,0.9);padding:8px 12px;box-shadow: 1px 6px 15px 1px rgba(0,0,0,0.13);border-radius: 4px;border:none;'\n  },\n  dataZoom: [\n    {\n      show: true,\n      startValue: 0,\n      endValue: showNum - 1,\n      type: 'slider',\n      xAxisIndex: [0],\n      handleSize: 0, //滑动条的 左右2个滑动条的大小\n      height: 5, //组件高度\n      left: 'center', //左边的距离\n      bottom: 10, //右边的距离\n      borderColor: 'transparent',\n      fillerColor: 'rgba(57, 126, 240, 0.5)',\n      borderRadius: 2,\n      backgroundColor: 'rgba(57, 126, 240, 0.2)', //两边未选中的滑动条区域的颜色\n      showDataShadow: false, //是否显示数据阴影 默认auto\n      showDetail: false, //即拖拽时候是否显示详细数值信息 默认true\n      realtime: true, //是否实时更新\n      brushSelect: false,\n      filterMode: 'filter',\n      moveHandleSize: 0,\n      moveHandleStyle: {\n        color: 'transparent'\n      }\n    },\n    {\n      type: 'inside',\n      zoomOnMouseWheel: false, //滚轮是否触发缩放\n      moveOnMouseMove: true, //鼠标滚轮触发滚动\n      moveOnMouseWheel: true\n    }\n  ],\n  grid: {\n    left: '0',\n    right: '0',\n    top: '25',\n    bottom,\n    containLabel: true\n  },\n  xAxis: {\n    type: 'category',\n    data: nameList,\n    axisTick: {\n      show: false //隐藏X轴刻度\n    },\n    axisLine: {\n      lineStyle: {\n        color: 'rgba(62, 102, 181, 1)'\n      }\n    },\n    axisLabel: {\n      show: true,\n      margin: 12,\n      interval: 0,\n      textStyle: {\n        fontSize: 12,\n        color: '#ABC6F7', //X轴文字颜色\n        fontFamily: 'Source Han Sans CN-Regular',\n        fontWeight: 400\n      }\n    }\n  },\n  yAxis: [\n    {\n      boundaryGap: ['0', '20%'],\n      name: yName,\n      nameGap: 15,\n      nameTextStyle: {\n        fontSize: 12,\n        color: '#ABC6F7', //X轴文字颜色\n        fontFamily: 'Source Han Sans CN-Regular',\n        align: 'left',\n        verticalAlign: 'center'\n      },\n      type: 'value',\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        lineStyle: {\n          type: 'dashed',\n          width: 1,\n          color: '#3E66B5'\n        }\n      },\n      axisLine: {\n        show: false\n      },\n      axisLabel: {\n        show: true,\n        fontSize: 12,\n        color: '#ABC6F7',\n        fontFamily: 'HarmonyOS Sans-Regular'\n      },\n      splitArea: {\n        show: false\n      }\n    },\n    {\n      boundaryGap: ['0', '10%'],\n      position: 'right',\n      max: valueMax + 0.2 * valueMax,\n      type: 'value',\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        show: false\n      },\n      axisLine: {\n        show: false\n      },\n      axisLabel: {\n        show: false\n      },\n      splitArea: {\n        show: false\n      }\n    }\n  ],\n  series: seriesData\n};\n/*定时轮播*/\nif (carouselOpen) {\n  let timer1 = null;\n  let timer2 = null;\n  let count = 0;\n  let dataLength = option.series[0].data.length;\n  // 翻滚\n  const pageTurning = (index) => {\n    if (dataZoomShow) {\n      const dataZoomOption = myChart.getOption().dataZoom[0];\n      const startValue = dataZoomOption.startValue;\n      const endValue = dataZoomOption.endValue;\n      const currentIndex = index % nameList.length;\n      // 跳到下一层\n      if (\n        currentIndex % showNum === 0 &&\n        currentIndex > 0 &&\n        currentIndex < nameList.length\n      ) {\n        myChart.dispatchAction({\n          type: 'dataZoom',\n          startValue: startValue + showNum,\n          endValue: endValue + showNum\n        });\n      }\n      // 回到起点\n      if (currentIndex === nameList.length - 1) {\n        // 重置\n        timer1 = setTimeout(() => {\n          count = 0;\n          myChart.setOption({\n            series: [\n              {\n                name: 'bgBar',\n                data: nameList.map((item, index) => {\n                  return {\n                    value: valueMax + 0.2 * valueMax,\n                    itemStyle: {\n                      color: 'rgba(57,126,240,0)'\n                    }\n                  };\n                })\n              }\n            ]\n          });\n          myChart.dispatchAction({\n            type: 'dataZoom',\n            startValue: 0,\n            endValue: showNum - 1\n          });\n        }, 3 * 1000);\n      }\n    }\n  };\n  // 轮播\n  timer2 = setInterval(() => {\n    pageTurning(count);\n    const currentIndex = count % dataLength;\n    myChart.dispatchAction({\n      type: 'downplay',\n      seriesIndex: [0, 1]\n    });\n    myChart.dispatchAction({\n      type: 'highlight',\n      seriesIndex: [0, 1],\n      dataIndex: currentIndex\n    });\n    myChart.dispatchAction({\n      type: 'showTip',\n      seriesIndex: 0,\n      dataIndex: currentIndex\n    });\n    myChart.setOption({\n      series: [\n        {\n          name: 'bgBar',\n          data: nameList.map((item, index) => {\n            if (index === currentIndex) {\n              return {\n                value: valueMax + 0.2 * valueMax,\n                itemStyle: {\n                  color: 'rgba(57,126,240,0.2)'\n                }\n              };\n            } else {\n              return {\n                value: valueMax + 0.2 * valueMax,\n                itemStyle: {\n                  color: 'rgba(57,126,240,0)'\n                }\n              };\n            }\n          })\n        }\n      ]\n    });\n    count++;\n  }, 3 * 1000);\n  // 鼠标移入\n  myChart.on('mouseover', (params) => {\n    clearInterval(timer1);\n    clearTimeout(timer1);\n    clearInterval(timer2);\n    clearTimeout(timer2);\n    const currentIndex = params.dataIndex;\n    myChart.dispatchAction({\n      type: 'downplay',\n      seriesIndex: [0, 1]\n    });\n    myChart.dispatchAction({\n      type: 'highlight',\n      seriesIndex: [0, 1],\n      dataIndex: currentIndex\n    });\n    myChart.dispatchAction({\n      type: 'showTip',\n      seriesIndex: 0,\n      dataIndex: currentIndex\n    });\n    myChart.setOption({\n      series: [\n        {\n          name: 'bgBar',\n          data: nameList.map((item, index) => {\n            if (index === currentIndex) {\n              return {\n                value: valueMax + 0.2 * valueMax,\n                itemStyle: {\n                  color: 'rgba(57,126,240,0.2)'\n                }\n              };\n            } else {\n              return {\n                value: valueMax + 0.2 * valueMax,\n                itemStyle: {\n                  color: 'rgba(57,126,240,0)'\n                }\n              };\n            }\n          })\n        }\n      ]\n    });\n  });\n  // 鼠标移出\n  myChart.on('mouseout', (params) => {\n    clearInterval(timer1);\n    clearTimeout(timer1);\n    clearInterval(timer2);\n    clearTimeout(timer2);\n    count = params.dataIndex + 1;\n    myChart.setOption({\n      series: [\n        {\n          name: 'bgBar',\n          data: nameList.map((item, index) => {\n            return {\n              value: valueMax + 0.2 * valueMax,\n              itemStyle: {\n                color: 'rgba(57,126,240,0)'\n              }\n            };\n          })\n        }\n      ]\n    });\n    timer2 = setInterval(() => {\n      pageTurning(count);\n      const currentIndex = count % dataLength;\n      myChart.dispatchAction({\n        type: 'downplay',\n        seriesIndex: [0, 1]\n      });\n      myChart.dispatchAction({\n        type: 'highlight',\n        seriesIndex: [0, 1],\n        dataIndex: currentIndex\n      });\n      myChart.dispatchAction({\n        type: 'showTip',\n        seriesIndex: 0,\n        dataIndex: currentIndex\n      });\n      myChart.setOption({\n        series: [\n          {\n            name: 'bgBar',\n            data: nameList.map((item, index) => {\n              if (index === currentIndex) {\n                return {\n                  value: valueMax + 0.2 * valueMax,\n                  itemStyle: {\n                    color: 'rgba(57,126,240,0.2)'\n                  }\n                };\n              } else {\n                return {\n                  value: valueMax + 0.2 * valueMax,\n                  itemStyle: {\n                    color: 'rgba(57,126,240,0)'\n                  }\n                };\n              }\n            })\n          }\n        ]\n      });\n      count++;\n    }, 3 * 1000);\n  });\n}"
  },
  {
    id: "line9",
    name: "消费趋势",
    type: ["line"],
    date: "2024.07.19",
    exampleImg: line9Img,
    remark: "多条标记线，多折线图",
    renderer: "svg",
    code: "const nameList = ['一月', '二月', '三月', '四月', '五月'];\nconst valueList = [\n  [15, 10, 12, 11, 9],\n  [16, 18, 13, 12, 10],\n  [14, 12, 10, 10, 10]\n];\nconst typeList = ['个人值', '全校均值', '贫困生均值'];\nconst unit = '元';\nconst yName = '消费金额(元)';\nconst markLineList = [\n  { name: '普通贫困均值', value: '15' },\n  { name: '一般贫困均值', value: '12' },\n  { name: '特困均值', value: '10' }\n];\nconst markLineShow = true;\n\n/* 样式 */\nconst colorList = [\n  'rgba(11, 201, 145',\n  'rgba(57, 126, 240',\n  'rgba(255, 147, 96'\n];\nconst markColorList = [\n  'rgba(255, 210, 0',\n  'rgba(255, 147, 96',\n  'rgba(253, 77, 99'\n];\n/* 数据整合 */\nlet seriesData = [];\ntypeList.map((typeItem, typeIndex) => {\n  let markLineData = [];\n  if (markLineShow && typeIndex === 0) {\n    markLineList.map((markItem, markIndex) => {\n      markLineData.push({\n        name: '平均值',\n        yAxis: markItem.value,\n        label: {\n          show: true,\n          color: `${markColorList[markIndex]}, 1)`,\n          fontSize: '12',\n          fontFamily: 'Source Han Sans CN-Regular',\n          distance: 6,\n          lineHeight: 16,\n          position: 'insideEndTop',\n          formatter: (params) => {\n            return `${markItem.name}：${markItem.value}${unit}`;\n          }\n        },\n        lineStyle: {\n          color: `${markColorList[markIndex]}, 0.5)`\n        }\n      });\n    });\n  }\n\n  seriesData.push({\n    name: typeItem,\n    type: 'line',\n    z: 2,\n    data: valueList[typeIndex],\n    symbolSize: 8,\n    yAxisIndex: 0,\n    //标记的大小\n    lineStyle: {\n      color: `${colorList[typeIndex]}, 1)`,\n      width: 2,\n      shadowColor: `${colorList[typeIndex]}, 0.3)`,\n      shadowBlur: 6,\n      shadowOffsetY: 4\n    },\n    itemStyle: {\n      color: `${colorList[typeIndex]}, 1)`\n    },\n    markLine: markLineShow &&\n      typeIndex === 0 && {\n        silent: true,\n        symbol: 'none',\n        data: markLineData\n      },\n    emphasis: {\n      scale: 1.2\n    }\n  });\n});\n\n// 添加柱状背景\nseriesData.push({\n  name: 'bgBar',\n  type: 'bar',\n  // silent: true,\n  yAxisIndex: 1,\n  xAxisIndex: 1,\n  z: 3,\n  barCategoryGap: 0,\n  data: nameList.map((item) => {\n    return {\n      value: 100,\n      itemStyle: {\n        color: 'rgba(50, 148, 255, 0)'\n      }\n    };\n  })\n});\n\noption = {\n  legend: {\n    data: typeList,\n    top: '0',\n    right: '0',\n    itemWidth: 12,\n    itemHeight: 12,\n    itemGap: 32,\n    textStyle: {\n      fontSize: 14,\n      color: 'rgba(0, 0, 0, 0.65)',\n      fontFamily: 'Source Han Sans CN-Regular',\n      padding: [0, 0, 0, 4]\n    }\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'none'\n    },\n    confine: true,\n    formatter: (params) => {\n      const { name } = params[0];\n      let childDiv = `<div style=\"display: flex;flex-direction: column;gap: 2px 0;\">`;\n      params.map((childItem, childIndex) => {\n        if (childItem['seriesName'] !== 'bgBar') {\n          childDiv += `<div style=\"display: flex;align-items: center;gap: 0 4px;\">\n            <div style=\"width: 6px;height: 6px;border-radius: 50%;border: 2px solid ${colorList[childIndex]},1);\"></div>\n             <div style=\"font-family: Source Han Sans CN-Regular;font-weight: 400;font-size: 14px;color: rgba(0,0,0,0.45);\">${childItem['seriesName']}</div>\n            <div style=\"margin-left: 2px;font-family: Source Han Sans CN-Regular;font-weight: 400;font-size: 14px;color: rgba(0,0,0,0.65);\">${childItem['value']}${unit}</div>\n          </div>`;\n        }\n      });\n      childDiv += `</div>`;\n      return `\n        <div style=\"font-size: 14px;font-family: Source Han Sans CN-Regular;font-weight: 400;color: rgba(0,0,0,0.65);margin-bottom:4px;\">${name}</div>\n        ${childDiv}\n      `;\n    },\n    extraCssText:\n      'background-color:#F6F9FD;padding:4px 8px;box-shadow: 0px 0px 4px 0px rgba(99,149,250,0.4);border-radius: 4px;'\n  },\n  grid: {\n    top: '32',\n    right: '0',\n    left: '0',\n    bottom: '0',\n    containLabel: true\n  },\n  xAxis: [\n    {\n      type: 'category',\n      data: nameList,\n      axisTick: { show: false },\n      axisLine: {\n        lineStyle: {\n          color: 'rgba(204, 204, 204, 1)'\n        }\n      },\n      axisLabel: {\n        color: 'rgba(102, 102, 102, 1)',\n        fontSize: 14,\n        fontFamily: 'Source Han Sans CN-Regular'\n      }\n    },\n    {\n      type: 'category',\n      data: nameList,\n      axisTick: { show: false },\n      axisLine: { show: false },\n      axisLabel: { show: false }\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value',\n      name: yName,\n      boundaryGap: ['0', '5%'],\n      nameTextStyle: {\n        color: 'rgba(0,0,0,0.65)',\n        fontSize: 14,\n        fontFamily: 'Source Han Sans CN-Regular',\n        fontWeight: 400,\n        align: 'left',\n        verticalAlign: 'center'\n      },\n      axisLabel: {\n        fontSize: 14,\n        color: 'rgba(0,0,0,0.65)',\n        fontFamily: 'Source Han Sans CN-Regular',\n        fontWeight: 400\n      },\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: 'rgba(204, 204, 204, 1)',\n          width: 1\n        }\n      },\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        lineStyle: {\n          color: 'rgba(216, 216, 216, 0.5)'\n        }\n      }\n    },\n    {\n      boundaryGap: ['0', '10%'],\n      position: 'right',\n      max: 100,\n      type: 'value',\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        show: false\n      },\n      axisLine: {\n        show: false\n      },\n      axisLabel: {\n        show: false\n      },\n      splitArea: {\n        show: false\n      }\n    }\n  ],\n  series: seriesData\n};\n// 鼠标移入\nmyChart.on('mouseover', (params) => {\n  myChart.dispatchAction({\n    type: 'downplay',\n    seriesIndex: 0\n  });\n  myChart.dispatchAction({\n    type: 'highlight',\n    seriesIndex: 0,\n    dataIndex: params.dataIndex\n  });\n  myChart.setOption({\n    tooltip: {\n      trigger: 'axis',\n      showContent: true\n    },\n    series: [\n      {\n        name: 'bgBar',\n        data: nameList.map((item, index) => {\n          if (index === params.dataIndex) {\n            return {\n              value: 100,\n              itemStyle: {\n                color: 'rgba(50, 148, 255, 0.1)'\n              }\n            };\n          } else {\n            return {\n              value: 100,\n              itemStyle: {\n                color: 'rgba(50, 148, 255, 0)'\n              }\n            };\n          }\n        })\n      }\n    ]\n  });\n});\n// 鼠标移出\nmyChart.on('mouseout', (params) => {\n  myChart.setOption({\n    tooltip: {\n      trigger: 'none',\n      showContent: false\n    },\n    series: [\n      {\n        name: 'bgBar',\n        data: nameList.map((item, index) => {\n          return {\n            value: 100,\n            itemStyle: {\n              color: 'rgba(50, 148, 255, 0)'\n            }\n          };\n        })\n      }\n    ]\n  });\n});"
  },
  {
    id: "line8",
    name: "贫困生消费趋势",
    type: ["line"],
    date: "2024.07.19",
    exampleImg: line8Img,
    remark: "标记线，多折线图",
    renderer: "svg",
    code: "const nameList = [\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '10',\n  '11',\n  '12',\n  '13',\n  '14',\n  '15',\n  '16',\n  '17',\n  '18',\n  '19',\n  '20',\n  '21',\n  '22',\n  '23',\n  '24',\n  '25',\n  '26',\n  '27',\n  '28',\n  '29',\n  '30'\n];\nconst valueList = [\n  [\n    10, 12, 13, 10, 15, 16, 10, 12, 13, 10, 15, 16, 10, 12, 13, 12, 13, 10, 15,\n    16, 10, 12, 13, 10, 15, 16, 10, 12, 13, 10\n  ],\n  [\n    8, 6, 9, 10, 8, 11, 8, 6, 9, 10, 8, 11, 8, 6, 9, 10, 8, 11, 8, 6, 9, 10, 8,\n    11, 8, 6, 9, 10, 8, 11\n  ],\n  [\n    12, 15, 8, 6, 7, 10, 12, 15, 8, 6, 7, 10, 12, 15, 8, 6, 7, 10, 12, 15, 8, 6,\n    7, 10, 12, 15, 8, 6, 7, 10\n  ]\n];\nconst typeList = ['一般困难', '困难', '特别困难'];\nconst unit = '元';\nconst yName = '平均消费金额(元)';\nconst tipUnit = '号';\nconst average = 11;\nconst averageShow = true;\n\n/* 数据处理 */\nlet seriesData = [];\nconst colorList = ['#1890FF', '#0BC991', '#FFA633'];\ntypeList.map((item, index) => {\n  seriesData.push({\n    name: item,\n    type: 'line',\n    data: valueList[index],\n    symbolSize: 8, //标记的大小\n    symbol: 'circle',\n    lineStyle: {\n      color: colorList[index]\n    },\n    itemStyle: {\n      color: colorList[index],\n      borderColor: '#FFFFFF',\n      borderWidth: 1\n    },\n    markLine: averageShow &&\n      index === 0 && {\n        silent: true,\n        symbol: 'none',\n        label: {\n          show: true,\n          color: '#FD4D63',\n          fontSize: '12',\n          fontFamily: 'Source Han Sans CN-Regular',\n          distance: 6,\n          lineHeight: 16,\n          position: 'insideEndTop',\n          formatter: (params) => {\n            return `平均贫困线：${params.value}${unit}`;\n          }\n        },\n        lineStyle: {\n          color: 'rgba(253, 77, 99, 0.5)'\n        },\n        data: [\n          {\n            name: '平均值',\n            yAxis: average\n          }\n        ]\n      },\n    emphasis: {\n      scale: 1.5\n    }\n  });\n});\n\nseriesData.push({\n  name: 'bgBar',\n  type: 'bar',\n  // silent: true,\n  yAxisIndex: 1,\n  xAxisIndex: 1,\n  z: 3,\n  barCategoryGap: 0,\n  data: nameList.map((item) => {\n    return {\n      value: 100,\n      itemStyle: {\n        color: 'rgba(50, 148, 255, 0)'\n      }\n    };\n  })\n});\n\noption = {\n  legend: {\n    data: typeList,\n    top: '0',\n    left: '0',\n    itemWidth: 21,\n    itemHeight: 12,\n    itemGap: 32,\n    textStyle: {\n      fontSize: 14,\n      color: 'rgba(0, 0, 0, 0.65)',\n      fontFamily: 'Source Han Sans CN-Regular',\n      padding: [0, 0, 0, 4]\n    }\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'none'\n    },\n    confine: true,\n    formatter: (params) => {\n      const { name } = params[0];\n      let childDiv = `<div style=\"display: flex;flex-direction: column;gap: 2px 0;\">`;\n      params.map((childItem, childIndex) => {\n        if (childItem['seriesName'] !== 'bgBar') {\n          childDiv += `<div style=\"display: flex;align-items: center;gap: 0 4px;\">\n            <div style=\"width: 6px;height: 6px;border-radius: 50%;border: 2px solid ${colorList[childIndex]};\"></div>\n             <div style=\"font-family: Source Han Sans CN-Regular;font-weight: 400;font-size: 14px;color: rgba(0,0,0,0.45);\">${childItem['seriesName']}</div>\n            <div style=\"margin-left: 2px;font-family: Source Han Sans CN-Regular;font-weight: 400;font-size: 14px;color: rgba(0,0,0,0.65);\">${childItem['value']}${unit}</div>\n          </div>`;\n        }\n      });\n      childDiv += `</div>`;\n      return `\n        <div style=\"font-size: 14px;font-family: Source Han Sans CN-Regular;font-weight: 400;color: rgba(0,0,0,0.65);margin-bottom:4px;\">${name}${tipUnit}</div>\n        ${childDiv}\n      `;\n    },\n    extraCssText:\n      'background-color:#F6F9FD;padding:4px 8px;box-shadow: 0px 0px 4px 0px rgba(99,149,250,0.4);border-radius: 4px;'\n  },\n  grid: {\n    top: '62',\n    right: '0',\n    left: '0',\n    bottom: '0',\n    containLabel: true\n  },\n  xAxis: [\n    {\n      type: 'category',\n      data: nameList,\n      axisTick: { show: false },\n      axisLine: {\n        lineStyle: {\n          color: 'rgba(204, 204, 204, 1)'\n        }\n      },\n      axisLabel: {\n        color: 'rgba(102, 102, 102, 1)',\n        fontSize: 14,\n        fontFamily: 'Source Han Sans CN-Regular'\n      }\n    },\n    {\n      type: 'category',\n      data: nameList,\n      axisTick: { show: false },\n      axisLine: { show: false },\n      axisLabel: { show: false }\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value',\n      name: yName,\n      nameTextStyle: {\n        color: 'rgba(0,0,0,0.65)',\n        fontSize: 14,\n        fontFamily: 'Source Han Sans CN-Regular',\n        fontWeight: 400,\n        align: 'left',\n        verticalAlign: 'center'\n      },\n      axisLabel: {\n        fontSize: 14,\n        color: 'rgba(0,0,0,0.65)',\n        fontFamily: 'Source Han Sans CN-Regular',\n        fontWeight: 400\n      },\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: 'rgba(204, 204, 204, 1)',\n          width: 1\n        }\n      },\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        lineStyle: {\n          color: 'rgba(216, 216, 216, 0.5)'\n        }\n      }\n    },\n    {\n      boundaryGap: ['0', '10%'],\n      position: 'right',\n      max: 100,\n      type: 'value',\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        show: false\n      },\n      axisLine: {\n        show: false\n      },\n      axisLabel: {\n        show: false\n      },\n      splitArea: {\n        show: false\n      }\n    }\n  ],\n  series: seriesData\n};\nmyChart.on('mouseover', (params) => {\n  myChart.dispatchAction({\n    type: 'downplay',\n    seriesIndex: 0\n  });\n  myChart.dispatchAction({\n    type: 'highlight',\n    seriesIndex: 0,\n    dataIndex: params.dataIndex\n  });\n  myChart.setOption({\n    tooltip: {\n      trigger: 'axis',\n      showContent: true\n    },\n    series: [\n      {\n        name: 'bgBar',\n        data: nameList.map((item, index) => {\n          if (index === params.dataIndex) {\n            return {\n              value: 100,\n              itemStyle: {\n                color: 'rgba(50, 148, 255, 0.1)'\n              }\n            };\n          } else {\n            return {\n              value: 100,\n              itemStyle: {\n                color: 'rgba(50, 148, 255, 0)'\n              }\n            };\n          }\n        })\n      }\n    ]\n  });\n});\nmyChart.on('mouseout', (params) => {\n  myChart.setOption({\n    tooltip: {\n      trigger: 'none',\n      showContent: false\n    },\n    series: [\n      {\n        name: 'bgBar',\n        data: nameList.map((item, index) => {\n          return {\n            value: 100,\n            itemStyle: {\n              color: 'rgba(50, 148, 255, 0)'\n            }\n          };\n        })\n      }\n    ]\n  });\n});"
  },
  {
    id: "line7",
    name: "各学年荣誉称号获评最低绩点",
    type: ["line"],
    date: "2024.07.18",
    exampleImg: line7Img,
    remark: "散点折线图，鼠标移入移出改变背景状态",
    renderer: "svg",
    code: "const nameList = [\n  '国家奖学金',\n  '励志奖学金',\n  '省部级奖学金',\n  '三好学生',\n  '优秀毕业生',\n  '特殊贡献奖',\n  '社会服务奖状'\n]; // x轴类名\nconst valueList = [\n  [3, 4, 4, 4.5, 3, 3.2, 4.6],\n  [4.8, 3.2, 3.2, 4.6, 4.2, 4.8, 3.2],\n  [2.2, 4.6, 4.2, 4.8, 3.2, 4.6, 4.2],\n  [3.2, 3, 3, 4, 4, 4, 4]\n]; // 数据\nconst typeList = ['2017年', '2018年', '2019年', '2020年']; // 类别\nconst yName = '最低绩点'; // y轴名称\nconst xName = ''; // y轴名称\nconst unit = ''; // y轴名称\n\n/* 数据 */\nlet seriesData = [];\nconst colorList = ['#1890FF', '#12DDA1', '#FFB026', '#9a98f8'];\ntypeList.map((typeItem, typeIndex) => {\n  seriesData.push({\n    name: typeItem,\n    type: 'line',\n    data: valueList[typeIndex],\n    symbolSize: 10, //标记的大小\n    symbol: 'circle',\n    lineStyle: {\n      color: 'rgba(255,255,255,0)',\n      width: 0\n    },\n    itemStyle: {\n      color: colorList[typeIndex]\n    },\n    emphasis: {\n      scale: 1.5\n    }\n  });\n});\n// 添加柱状背景\nseriesData.push({\n  name: 'bgBar',\n  type: 'bar',\n  // silent: true,\n  yAxisIndex: 1,\n  xAxisIndex: 1,\n  z: 3,\n  barCategoryGap: 0,\n  data: nameList.map((item) => {\n    return {\n      value: 100,\n      itemStyle: {\n        color: 'rgba(50, 148, 255, 0)'\n      }\n    };\n  })\n});\n\noption = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'none'\n    },\n    confine: true,\n    formatter: (params) => {\n      const { name } = params[0];\n      let childDiv = `<div style=\"display: flex;flex-direction: column;gap: 4px 0;\">`;\n      params.map((childItem, childIndex) => {\n        if (childItem['seriesName'] !== 'bgBar') {\n          childDiv += `<div style=\"display: flex;align-items: center;gap: 0 4px;\">\n            <div style=\"width: 6px;height: 6px;border-radius: 50%;border: 2px solid ${colorList[childIndex]};\"></div>\n            <div style=\"margin-left: 2px;font-family: Source Han Sans CN-Regular;font-weight: 400;font-size: 14px;color: rgba(0,0,0,0.65);\">${typeList[childIndex]}${yName}：</div>\n            <div style=\"margin-left: 2px;font-family: Source Han Sans CN-Regular;font-weight: 400;font-size: 14px;color: rgba(0,0,0,0.65);\">${childItem['value']}${unit}</div>\n          </div>`;\n        }\n      });\n      childDiv += `</div>`;\n      return `\n        <div style=\"font-size: 14px;font-family: Source Han Sans CN-Regular;font-weight: 400;color: rgba(0,0,0,0.65);margin-bottom:4px;\">${name}</div>\n        ${childDiv}\n      `;\n    },\n    extraCssText:\n      'background-color:#F6F9FD;padding:4px 8px;box-shadow: 0px 0px 4px 0px rgba(99,149,250,0.4);border-radius: 4px;'\n  },\n  grid: {\n    top: '24',\n    right: '28',\n    left: '0',\n    bottom: '58',\n    containLabel: true\n  },\n  legend: {\n    data: typeList,\n    bottom: '0',\n    right: 'center',\n    itemWidth: 16,\n    itemHeight: 16,\n    itemGap: 24,\n    textStyle: {\n      fontSize: 14,\n      color: 'rgba(0, 0, 0, 0.65)',\n      fontFamily: 'Source Han Sans CN-Regular',\n      padding: [0, 0, 0, 4]\n    }\n  },\n  xAxis: [\n    {\n      type: 'category',\n      name: xName,\n      nameGap: 0,\n      nameTextStyle: {\n        color: 'rgba(0,0,0,0.65)',\n        fontSize: 14,\n        fontFamily: 'Source Han Sans CN-Regular',\n        fontWeight: 400,\n        align: 'left',\n        verticalAlign: 'top',\n        lineHeight: 28\n      },\n      data: nameList,\n      axisTick: { show: false },\n      axisLine: {\n        lineStyle: {\n          color: 'rgba(204, 204, 204, 1)'\n        }\n      },\n      axisLabel: {\n        color: 'rgba(102, 102, 102, 1)',\n        fontSize: 14,\n        fontFamily: 'Source Han Sans CN-Regular'\n      }\n    },\n    {\n      type: 'category',\n      data: nameList,\n      axisTick: { show: false },\n      axisLine: { show: false },\n      axisLabel: { show: false }\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value',\n      name: yName,\n      nameTextStyle: {\n        color: 'rgba(0,0,0,0.65)',\n        fontSize: 14,\n        fontFamily: 'Source Han Sans CN-Regular',\n        fontWeight: 400,\n        align: 'left',\n        verticalAlign: 'center'\n      },\n      axisLabel: {\n        fontSize: 14,\n        color: 'rgba(0,0,0,0.65)',\n        fontFamily: 'Source Han Sans CN-Regular',\n        fontWeight: 400\n      },\n      axisLine: {\n        show: false\n      },\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        lineStyle: {\n          color: 'rgba(0, 0, 0, 0.12)',\n          type: 'dashed'\n        }\n      }\n    },\n    {\n      boundaryGap: ['0', '10%'],\n      position: 'right',\n      max: 100,\n      type: 'value',\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        show: false\n      },\n      axisLine: {\n        show: false\n      },\n      axisLabel: {\n        show: false\n      },\n      splitArea: {\n        show: false\n      }\n    }\n  ],\n  series: seriesData\n};\n\n// 鼠标移入\nmyChart.on('mouseover', (params) => {\n  myChart.dispatchAction({\n    type: 'downplay',\n    seriesIndex: 0\n  });\n  myChart.dispatchAction({\n    type: 'highlight',\n    seriesIndex: 0,\n    dataIndex: params.dataIndex\n  });\n  myChart.setOption({\n    tooltip: {\n      trigger: 'axis',\n      showContent: true\n    },\n    series: [\n      {\n        name: 'bgBar',\n        data: nameList.map((item, index) => {\n          if (index === params.dataIndex) {\n            return {\n              value: 100,\n              itemStyle: {\n                color: 'rgba(50, 148, 255, 0.1)'\n              }\n            };\n          } else {\n            return {\n              value: 100,\n              itemStyle: {\n                color: 'rgba(50, 148, 255, 0)'\n              }\n            };\n          }\n        })\n      }\n    ]\n  });\n});\n// 鼠标移出\nmyChart.on('mouseout', (params) => {\n  myChart.setOption({\n    tooltip: {\n      trigger: 'none',\n      showContent: false\n    },\n    series: [\n      {\n        name: 'bgBar',\n        data: nameList.map((item, index) => {\n          return {\n            value: 100,\n            itemStyle: {\n              color: 'rgba(50, 148, 255, 0)'\n            }\n          };\n        })\n      }\n    ]\n  });\n});"
  },
  {
    id: "line6",
    name: "各学期到课率",
    type: ["line"],
    date: "2024.04.01",
    exampleImg: line6Img,
    remark: "面积折线图",
    renderer: "svg",
    code: "const captions = [\n  '2018-01',\n  '2018-02',\n  '2019-01',\n  '2019-02',\n  '2020-01',\n  '2020-02',\n  '2021-01',\n  '2021-02',\n  '2022-01',\n  '2022-02'\n]; // x轴数据\nconst values = [81, 65, 76, 84, 49, 81, 65, 76, 84, 49]; // 选课人数\n\noption = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'none'\n    },\n    formatter: '{b0}</br></br>人数：{c0}'\n  },\n  grid: {\n    top: '36', //上边距\n    right: '0', //右边距\n    left: '37', //左边距\n    bottom: '60' //下边距\n  },\n  xAxis: {\n    type: 'category',\n    data: captions,\n    axisTick: {\n      show: false //隐藏X轴刻度\n    },\n    axisLine: {\n      lineStyle: {\n        color: 'rgba(223, 223, 223, 1)'\n      }\n    },\n    axisLabel: {\n      color: 'rgba(0,0,0,0.495)',\n      fontSize: 12,\n      fontFamily: 'Source Han Sans CN-Regular'\n    }\n  },\n  yAxis: [\n    {\n      type: 'value',\n      name: '单位：人',\n      nameTextStyle: {\n        color: 'rgba(0,0,0,0.45)',\n        fontSize: 12,\n        fontFamily: 'Source Han Sans CN-Regular',\n        align: 'left',\n        verticalAlign: 'center'\n      },\n      axisLabel: {\n        color: 'rgba(0,0,0,0.45)',\n        fontSize: 12,\n        fontFamily: 'Source Han Sans CN-Regular'\n      },\n      axisLine: {\n        show: false,\n        lineStyle: {\n          color: 'rgba(223, 223, 223, 1)'\n        }\n      },\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        lineStyle: {\n          color: 'rgba(223, 223, 223, 1)',\n          type: 'dashed'\n        }\n      }\n    }\n  ],\n  dataZoom: [\n    {\n      type: 'slider',\n      backgroundColor: '#F5F5F5',\n      height: 8,\n      show: true, //flase直接隐藏图形\n      left: 'center', //滚动条靠左侧的百分比\n      bottom: 15,\n      startValue: 0, //滚动条的起始位置\n      endValue: 5, //滚动条的截止位置（按比例分割你的柱状图x轴长度）\n      handleIcon: 'none',\n      handleStyle: {\n        color: '#E8E8E8',\n        borderColor: '#E8E8E8'\n      },\n      fillerColor: '#E6E6E6',\n      borderColor: 'transparent',\n      showDetail: false,\n      dataBackground: {\n        areaStyle: {\n          opacity: 0\n        },\n        lineStyle: {\n          color: 'transparent'\n        }\n      }\n    }\n  ],\n  series: [\n    {\n      type: 'line',\n      showSymbol: false,\n      data: values,\n      symbolSize: 10, //标记的大小\n      areaStyle: {\n        color: {\n          type: 'linear',\n          x: 1,\n          y: 1,\n          x2: 1,\n          y2: 0,\n          colorStops: [\n            {\n              offset: 0,\n              color: 'rgba(57, 126, 240, 0)' // 0% 处的颜色\n            },\n            {\n              offset: 1,\n              color: 'rgba(57, 126, 240, 0.8)' // 100% 处的颜色\n            }\n          ],\n          global: false // 缺省为 false\n        }\n      },\n      lineStyle: {\n        color: '#397EF0',\n        width: 2.5,\n        shadowColor: '#DEEAFD', //设置折线阴影\n        shadowBlur: 15,\n        shadowOffsetY: 10\n      },\n      itemStyle: {\n        //折线拐点标志的样式\n        color: '#397EF0',\n        borderColor: '#397EF0',\n        borderWidth: 2.5\n      },\n      smooth: true\n    }\n  ]\n};"
  },
  {
    id: "line5",
    name: "轮播趋势折线图",
    type: ["line"],
    date: "2023.12.25",
    exampleImg: line5Img,
    remark: "多折线趋势图",
    renderer: "svg",
    code: "// 数据\nconst captions = ['2018', '2019', '2020', '2021', '2022', '2023']; //时间\nconst values1 = [33, 40, 43, 33, 42, 21];\nconst values2 = [50, 62, 82, 77, 72, 15];\nconst values3 = [43, 45, 46, 68, 64, 70];\nconst values4 = [36, 32, 28, 22, 28, 10];\nconst values5 = [125, 158, 141, 139, 129, 4];\nlet valueList = [values1, values2, values3, values4, values5]; // 数据汇合\n\nlet legendData = ['类型一', '类型二', '类型三', '类型四', '类型五']; // 图例数据\nlet colorList = ['#5B8FF9', '#61DDAA', '#F6BD16', '#2F467A', '#FA8974']; // 颜色系\nlet seriesData = []; // series数据\nlegendData.map((item, index) => {\n  seriesData.push({\n    name: item,\n    type: 'line',\n    data: valueList[index],\n    symbolSize: 8, //标记的大小\n    lineStyle: {\n      color: colorList[index],\n      width: 3\n    },\n    itemStyle: {\n      //折线拐点标志的样式\n      color: colorList[index],\n      borderColor: colorList[index],\n      borderWidth: 5\n    },\n    emphasis: {\n      scale: 1.5\n    }\n  });\n});\n\noption = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'none'\n    },\n    formatter:\n      '{b0}<br/>{a0}：{c0}篇<br/>{a1}：{c1}篇<br/>{a2}：{c2}篇<br/>{a3}：{c3}篇<br/>{a4}：{c4}篇'\n  },\n  legend: {\n    data: legendData,\n    top: '0',\n    left: '20',\n    itemWidth: 12,\n    itemHeight: 12,\n    itemGap: 20,\n    textStyle: {\n      fontSize: 14,\n      color: 'rgba(0, 0, 0, 0.45)',\n      fontFamily: 'Source Han Sans CN-Regular',\n      padding: [0, 0, 0, 4]\n    }\n  },\n  grid: {\n    left: '20',\n    right: '28',\n    top: '60',\n    bottom: '24',\n    containLabel: true\n  },\n  xAxis: {\n    type: 'category',\n    data: captions,\n    axisTick: {\n      show: false //隐藏X轴刻度\n    },\n    axisLine: {\n      lineStyle: {\n        color: 'rgba(204, 204, 204, 1)'\n      }\n    },\n    axisLabel: {\n      show: true,\n      textStyle: {\n        fontSize: 14,\n        color: 'rgba(0, 0, 0, 0.65)', //X轴文字颜色\n        fontFamily: 'Source Han Sans CN-Regular'\n      }\n    }\n  },\n  yAxis: {\n    name: '单位：项',\n    nameTextStyle: {\n      fontSize: 14,\n      color: 'rgba(0, 0, 0, 0.65)', //X轴文字颜色\n      fontFamily: 'Source Han Sans CN-Regular',\n      align: 'left',\n      verticalAlign: 'center'\n    },\n    type: 'value',\n    axisTick: {\n      show: false\n    },\n    splitLine: {\n      lineStyle: {\n        type: 'dashed',\n        width: 1,\n        color: 'rgba(223, 223, 223, 1)',\n        opacity: '1'\n      }\n    },\n    axisLine: {\n      show: false\n    },\n    axisLabel: {\n      show: true,\n      textStyle: {\n        fontSize: 14,\n        color: 'rgba(0, 0, 0, 0.65)',\n        fontFamily: 'HarmonyOS Sans-Regular'\n      }\n    },\n    splitArea: {\n      show: false\n    }\n  },\n  series: seriesData\n};"
  },
  {
    id: "line4",
    name: "散点折线图",
    type: ["line"],
    date: "2023.12.25",
    exampleImg: line4Img,
    remark: "特殊标记最大值最小值",
    renderer: "svg",
    code: "let captions = ['学院1', '学院2', '学院3', '学院4', '学院5'];\nlet values = [60, 55, 63, 78, 49];\n\nlet maxValue = Math.max(...values);\nlet minValue = Math.min(...values);\n\noption = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'none'\n    },\n    confine: true,\n    formatter: (params) => {\n      const { name, data } = params[0];\n      return `\n            <div style=\"font-size: 14px;font-family: Source Han Sans CN-Medium;font-weight: 500;color: #FFFFFF;margin-bottom:8px;\">${name}</div>\n            <div style=\"font-size: 14px;font-family: Source Han Sans CN-Medium;font-weight: 500;color: #FFFFFF;\">人均高质量论文：${data}篇/人</div>`;\n    },\n    extraCssText:\n      'opacity: 0.8;background-color:#050F1B;padding:12px;box-shadow: 1px 6px 15px 1px rgba(0,0,0,0.13);border-radius: 4px;filter: blur(undefinedpx);border:none;'\n  },\n  grid: {\n    left: '24',\n    right: '24',\n    top: '48',\n    bottom: '24',\n    containLabel: true\n  },\n  xAxis: {\n    type: 'category',\n    data: captions,\n    axisTick: {\n      show: false //隐藏X轴刻度\n    },\n    axisLine: {\n      lineStyle: {\n        color: 'rgba(204, 204, 204, 1)'\n      }\n    },\n    axisLabel: {\n      show: true,\n      showMaxLabel: true,\n      showMinLabel: true,\n      // interval: 0, // 间距\n      // 设置X轴标签自定义样式  换行显示\n      formatter: function (value, index) {\n        if (index === 0 || index === values.length - 1) {\n          return value;\n        } else {\n          return ' ';\n        }\n      },\n      fontSize: 14,\n      color: 'rgba(0, 0, 0, 0.65)', //X轴文字颜色\n      fontFamily: 'Source Han Sans CN-Regular'\n    }\n  },\n  yAxis: {\n    name: '论文：篇/人',\n    nameTextStyle: {\n      fontSize: 14,\n      color: 'rgba(0, 0, 0, 0.65)', //X轴文字颜色\n      fontFamily: 'Source Han Sans CN-Regular',\n      align: 'left',\n      verticalAlign: 'center'\n    },\n    type: 'value',\n    axisTick: {\n      show: false\n    },\n    splitLine: {\n      lineStyle: {\n        type: 'dashed',\n        width: 1,\n        color: 'rgba(223, 223, 223, 1)',\n        opacity: '1'\n      }\n    },\n    axisLine: {\n      show: false\n    },\n    axisLabel: {\n      show: true,\n      fontSize: 14,\n      color: 'rgba(0, 0, 0, 0.65)',\n      fontFamily: 'HarmonyOS Sans-Regular'\n    },\n    splitArea: {\n      show: false\n    }\n  },\n  series: [\n    {\n      name: 'line',\n      type: 'line',\n      data: values,\n      symbolSize: 10, //标记的大小\n      symbol: 'circle',\n      lineStyle: {\n        color: 'rgba(255,255,255,0)',\n        width: 0\n      },\n      itemStyle: {\n        //折线拐点标志的样式\n        color: (params) => {\n          let data = params.data;\n          if (data === minValue) {\n            return '#000';\n          } else if (data === maxValue) {\n            return '#999';\n          } else {\n            return '#FA8974';\n          }\n        }\n      },\n      emphasis: {\n        scale: 1.5\n      }\n    }\n  ]\n};"
  },
  {
    id: "line3",
    name: "轮播趋势折线图",
    type: ["line"],
    date: "2023.12.22",
    exampleImg: line3Img,
    remark: "轮播，标记线",
    renderer: "svg",
    code: "const dateList = [\n  '05.01',\n  '05.02',\n  '05.03',\n  '05.04',\n  '05.05',\n  '05.06',\n  '05.07'\n]; // 日期\nconst values = [81, 65, 76, 84, 59, 64, 65];\n\noption = {\n  backgroundColor: '#010d20',\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'line',\n      lineStyle: {\n        color: {\n          type: 'linear',\n          x: 0,\n          y: 1,\n          x2: 0,\n          y2: 0,\n          colorStops: [\n            {\n              offset: 0,\n              color: 'rgba(66, 151, 255, 1)' // 0% 处的颜色\n            },\n            {\n              offset: 1,\n              color: 'rgba(66, 151, 255, 0)' // 100% 处的颜色\n            }\n          ],\n          global: false // 缺省为 false\n        }\n      },\n      label: {\n        show: true,\n        fontSize: 12,\n        fontFamily: 'Source Han Sans CN-Regular',\n        fontWeight: 400,\n        color: '#A0CAFF',\n        backgroundColor: 'transparent',\n        margin: 1\n      }\n    },\n    formatter: (params) => {\n      return '';\n    },\n    extraCssText: 'background: transparent;border: none'\n  },\n  grid: {\n    top: '48', //上边距\n    right: '48', //右边距\n    left: '48', //左边距\n    bottom: '48', //下边距\n    containLabel: true\n  },\n  xAxis: {\n    type: 'category',\n    data: dateList,\n    boundaryGap: false,\n    axisTick: {\n      show: false //隐藏X轴刻度\n    },\n    axisLine: {\n      show: false //隐藏X轴\n    },\n    axisLabel: {\n      show: false\n    }\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      show: false\n    },\n    axisLine: {\n      show: false\n    },\n    axisTick: {\n      show: false\n    },\n    splitLine: {\n      show: false\n    }\n  },\n  series: [\n    {\n      type: 'line',\n      data: values,\n      markLine: {\n        silent: true, // 是否不响应鼠标事件\n        precision: 0, // 精度\n        symbol: 'none',\n        lineStyle: {\n          type: 'dashed',\n          color: 'rgba(160, 202, 255, 0.3)'\n        },\n        label: {\n          show: true,\n          position: 'start',\n          fontSize: 12,\n          fontFamily: 'Source Han Sans CN-Regular',\n          fontWeight: 400,\n          color: '#A0CAFF'\n        },\n        data: [\n          {\n            name: '平均线',\n            type: 'average'\n          }\n        ]\n      },\n      symbolSize: 2, //标记的大小\n      areaStyle: {\n        color: {\n          type: 'linear',\n          x: 0,\n          y: 0,\n          x2: 0,\n          y2: 1,\n          colorStops: [\n            {\n              offset: 0,\n              color: 'rgba(47, 145, 255, 0.3)' // 0% 处的颜色\n            },\n            {\n              offset: 1,\n              color: 'rgba(47,145,255,0)' // 100% 处的颜色\n            }\n          ],\n          global: false // 缺省为 false\n        }\n      },\n      lineStyle: {\n        color: '#4297FF',\n        width: 1,\n        shadowColor: '#0090FF', //设置折线阴影\n        shadowBlur: 5\n      },\n      itemStyle: {\n        //折线拐点标志的样式\n        color: '#FFF',\n        shadowColor: '#0090FF', //设置折线阴影\n        shadowBlur: 5\n      },\n      smooth: 0.5,\n      emphasis: {\n        label: {\n          show: true,\n          fontSize: 14,\n          position: [20, -50],\n          fontFamily: 'HarmonyOS Sans-Regular',\n          fontWeight: 400,\n          color: '#4297FF',\n          formatter: '{c}人'\n          //padding: [0, 0, 0, 40]\n        }\n      }\n    }\n  ]\n};\nlet count = 0;\nvar timer = null;\n\nvar dataLength = option.series[0].data.length;\ntimer && clearInterval(timer);\ntimer = setInterval(() => {\n  myChart.dispatchAction({\n    type: 'downplay',\n    seriesIndex: 0\n  });\n  myChart.dispatchAction({\n    type: 'highlight',\n    seriesIndex: 0,\n    dataIndex: count % dataLength\n  });\n  myChart.dispatchAction({\n    type: 'showTip',\n    seriesIndex: 0,\n    dataIndex: count % dataLength\n  });\n  count++;\n}, 3000);\nmyChart.on('mouseover', function (params) {\n  clearInterval(timer);\n  count = 0;\n  myChart.dispatchAction({\n    type: 'downplay',\n    seriesIndex: 0\n  });\n  myChart.dispatchAction({\n    type: 'highlight',\n    seriesIndex: 0,\n    dataIndex: params.dataIndex\n  });\n  myChart.dispatchAction({\n    type: 'showTip',\n    seriesIndex: 0,\n    dataIndex: params.dataIndex\n  });\n});\nmyChart.on('mouseout', function (params) {\n  count = 0;\n  timer && clearInterval(timer);\n  timer = setInterval(function () {\n    myChart.dispatchAction({\n      type: 'downplay',\n      seriesIndex: 0\n    });\n    myChart.dispatchAction({\n      type: 'highlight',\n      seriesIndex: 0,\n      dataIndex: count % dataLength\n    });\n    myChart.dispatchAction({\n      type: 'showTip',\n      seriesIndex: 0,\n      dataIndex: count % dataLength\n    });\n    count++;\n  }, 2000);\n});"
  },
  {
    id: "line2",
    name: "收支趋势对比图",
    type: ["line"],
    date: "2023.12.21",
    exampleImg: line2Img,
    remark: "双折线对比图，legend改变",
    renderer: "svg",
    code: "/* 数据 */\nconst nameList = ['2018', '2019', '2020', '2021', '2022']; // x轴数据\nconst valueList = [\n  [60, 70, 78, 70, 60],\n  [45, 60, 65, 60, 78]\n]; // 折线总数据\nconst legend = ['金额', '增长率']; // 图例数据\nconst yName = '人数(人)'; // y轴名称\nconst unit = '人';\n\n/* 颜色 */\nconst colorList = ['rgba(57, 126, 240, 1)', 'rgba(250, 173, 20, 1)']; // 主颜色系\nconst areaColorList = [\n  {\n    type: 'linear',\n    x: 0,\n    y: 0,\n    x2: 0,\n    y2: 1,\n    colorStops: [\n      {\n        offset: 0,\n        color: 'rgba(0, 117, 255, 0.3)' // 0% 处的颜色\n      },\n      {\n        offset: 1,\n        color: 'rgba(0, 117, 255, 0)' // 100% 处的颜色\n      }\n    ],\n    global: false // 缺省为 false\n  },\n  {\n    type: 'linear',\n    x: 0,\n    y: 0,\n    x2: 0,\n    y2: 1,\n    colorStops: [\n      {\n        offset: 0,\n        color: 'rgba(255, 175, 20, 0.3)' // 0% 处的颜色\n      },\n      {\n        offset: 1,\n        color: 'rgba(255, 179, 31, 0)' // 100% 处的颜色\n      }\n    ],\n    global: false // 缺省为 false\n  }\n]; // 渐变空间颜色\n\n/* 数据整理 */\n// 获取拐点数据\nconst getLineDataAll = () => {\n  let dataArr = []; // 拐点数据\n  let arr1 = [];\n  let arr2 = [];\n  nameList.map((item, index) => {\n    // 判断大小显示label\n    // arr1\n    if (Number(valueList[0][index]) > Number(valueList[1][index])) {\n      arr1.push({\n        value: valueList[0][index],\n        label: {\n          show: true,\n          z: 3,\n          position: 'top',\n          opacity: 0.6,\n          backgroundColor: '#001435',\n          offset: [0, -8],\n          borderRadius: 2,\n          formatter: (params) => {\n            return `{a|${valueList[0][index]}}\\n{b|${valueList[1][index]}}`;\n          },\n          rich: {\n            a: {\n              fontSize: 12,\n              color: 'rgba(57, 126, 240, 1)',\n              fontFamily: 'Source Han Sans CN-Regular',\n              padding: [4, 2, 2, 2]\n            },\n            b: {\n              fontSize: 12,\n              color: 'rgba(255, 229, 143, 1)',\n              fontFamily: 'Source Han Sans CN-Regular',\n              padding: [2, 2, 0, 2]\n            }\n          }\n        },\n        emphasis: {\n          scale: 2,\n          itemStyle: {\n            borderWidth: 3\n          },\n          label: {\n            opacity: 1,\n            rich: {\n              a: {\n                fontSize: 14,\n                color: '#ABC6F7',\n                fontFamily: 'Source Han Sans CN-Regular',\n                padding: [4, 2, 2, 2]\n              },\n              b: {\n                fontSize: 14,\n                color: 'rgba(255, 229, 143, 1)',\n                fontFamily: 'Source Han Sans CN-Regular',\n                padding: [2, 2, 0, 2]\n              }\n            }\n          }\n        }\n      });\n    } else {\n      arr1.push({\n        value: valueList[0][index],\n        emphasis: {\n          scale: 2,\n          itemStyle: {\n            borderWidth: 3\n          }\n        }\n      });\n    }\n    // arr2\n    if (Number(valueList[1][index]) > Number(valueList[0][index])) {\n      arr2.push({\n        value: valueList[1][index],\n        label: {\n          show: true,\n          z: 3,\n          position: 'top',\n          opacity: 0.6,\n          backgroundColor: '#001435',\n          offset: [0, -8],\n          borderRadius: 2,\n          formatter: (params) => {\n            return `{b|${valueList[1][index]}}\\n{a|${valueList[0][index]}}`;\n          },\n          rich: {\n            a: {\n              fontSize: 12,\n              color: 'rgba(57, 126, 240, 1)',\n              fontFamily: 'Source Han Sans CN-Regular',\n              padding: [2, 2, 0, 2]\n            },\n            b: {\n              fontSize: 12,\n              color: 'rgba(255, 229, 143, 1)',\n              fontFamily: 'Source Han Sans CN-Regular',\n              padding: [4, 2, 0, 2]\n            }\n          }\n        },\n        emphasis: {\n          scale: 2,\n          itemStyle: {\n            borderWidth: 3\n          },\n          label: {\n            opacity: 1,\n            rich: {\n              a: {\n                fontSize: 14,\n                color: '#ABC6F7',\n                fontFamily: 'Source Han Sans CN-Regular',\n                padding: [2, 2, 0, 2]\n              },\n              b: {\n                fontSize: 14,\n                color: 'rgba(255, 229, 143, 1)',\n                fontFamily: 'Source Han Sans CN-Regular',\n                padding: [4, 2, 0, 2]\n              }\n            }\n          }\n        }\n      });\n    } else {\n      arr2.push({\n        value: valueList[1][index],\n        emphasis: {\n          scale: 2,\n          itemStyle: {\n            borderWidth: 3\n          }\n        }\n      });\n    }\n  });\n  dataArr.push(arr1);\n  dataArr.push(arr2);\n  return dataArr;\n};\n// 获取单条\nconst getLineDataSingle = () => {\n  let dataArr = []; // 拐点数据\n  let arr1 = [];\n  let arr2 = [];\n  nameList.map((item, index) => {\n    // 判断大小显示label\n    // arr1\n    arr1.push({\n      value: valueList[0][index],\n      label: {\n        show: true,\n        z: 3,\n        position: 'top',\n        opacity: 0.6,\n        backgroundColor: '#001435',\n        offset: [0, -8],\n        borderRadius: 2,\n        formatter: (params) => {\n          return `{a|${valueList[0][index]}}`;\n        },\n        rich: {\n          a: {\n            fontSize: 12,\n            color: 'rgba(57, 126, 240, 1)',\n            fontFamily: 'Source Han Sans CN-Regular',\n            padding: [4, 2, 2, 2]\n          }\n        }\n      },\n      emphasis: {\n        scale: 2,\n        itemStyle: {\n          borderWidth: 3\n        },\n        label: {\n          opacity: 1,\n          rich: {\n            a: {\n              fontSize: 14,\n              color: '#ABC6F7',\n              fontFamily: 'Source Han Sans CN-Regular',\n              padding: [4, 2, 2, 2]\n            }\n          }\n        }\n      }\n    });\n    // arr2\n    arr2.push({\n      value: valueList[1][index],\n      label: {\n        show: true,\n        z: 3,\n        position: 'top',\n        opacity: 0.6,\n        backgroundColor: '#001435',\n        offset: [0, -8],\n        borderRadius: 2,\n        formatter: (params) => {\n          return `{b|${valueList[1][index]}}`;\n        },\n        rich: {\n          b: {\n            fontSize: 12,\n            color: 'rgba(255, 229, 143, 1)',\n            fontFamily: 'Source Han Sans CN-Regular',\n            padding: [4, 2, 0, 2]\n          }\n        }\n      },\n      emphasis: {\n        scale: 2,\n        itemStyle: {\n          borderWidth: 3\n        },\n        label: {\n          opacity: 1,\n          rich: {\n            b: {\n              fontSize: 14,\n              color: 'rgba(255, 229, 143, 1)',\n              fontFamily: 'Source Han Sans CN-Regular',\n              padding: [4, 2, 0, 2]\n            }\n          }\n        }\n      }\n    });\n  });\n  dataArr.push(arr1);\n  dataArr.push(arr2);\n  return dataArr;\n};\nlet dataList = getLineDataAll();\n\nlet legendData = []; // legend数据\nlet seriesData = []; // series数据\nlegend.map((item, index) => {\n  legendData.push({\n    name: item,\n    icon: 'circle',\n    itemStyle: {\n      color: '#FFFFFF',\n      borderColor: colorList[index],\n      borderWidth: 3\n    }\n  });\n  seriesData.push({\n    name: item,\n    yAxisIndex: 0,\n    type: 'line',\n    silent: true,\n    z: 2,\n    data: dataList[index],\n    symbolSize: 6, //标记的大小\n    lineStyle: {\n      color: colorList[index],\n      width: 2\n    },\n    itemStyle: {\n      //折线拐点标志的样式\n      color: colorList[index],\n      borderColor: colorList[index],\n      borderWidth: 1\n    },\n    areaStyle: {\n      color: areaColorList[index]\n    }\n  });\n});\nlet valueMax = 0;\n[...valueList[0], ...valueList[1]].map((item) => {\n  if (Number(item) > valueMax) {\n    valueMax = Number(item);\n  }\n});\nseriesData.push({\n  name: 'bgBar',\n  type: 'bar',\n  // silent: true,\n  yAxisIndex: 1,\n  z: 1,\n  data: nameList.map((item) => {\n    return {\n      value: valueMax + 0.2 * valueMax,\n      itemStyle: {\n        color: 'rgba(57,126,240,0)'\n      }\n    };\n  })\n  // barWidth: 33\n});\n\noption = {\n  backgroundColor: 'RGBA(0, 13, 32, 1)',\n  tooltip: {\n    trigger: 'none',\n    axisPointer: {\n      type: 'none',\n      shadowStyle: {\n        color: 'rgba(57, 126, 240, 0.2)'\n      }\n    },\n    showContent: false,\n    confine: true,\n    formatter: (params) => {\n      let currenrName = params[0].name;\n      let currenrTypeList = params.filter((item) => item.seriesName);\n      let childDiv = `<div>`;\n      legend.map((item, index) => {\n        params.map((item2, index2) => {\n          if (item2.seriesName === item) {\n            childDiv += `\n                <div style=\"margin-top: 4px;position:relative;\">\n                  <div style=\"width: 6px;height: 6px;background: #FFFFFF;border: 3px solid ${colorList[index]};position:absolute;top:50%;transform:translateY(-50%);left:0;border-radius:50%;\"></div>\n                  <span style=\"margin:0 0 0 20px;font-size: 12px;font-family: Source Han Sans CN-Regular;font-weight: 400;color: #FFFFFF;\">${item}：${params[index2].value}${unit}</span>\n                </div>\n            `;\n          }\n        });\n      });\n      childDiv += `</div>`;\n      return `\n\t\t\t\t    <div style=\"font-size: 12px;font-family: Source Han Sans CN-Medium;font-weight: 500;color: #FFFFFF;margin-bottom:4px;\">${currenrName}年</div>\n            ${childDiv}\n\t\t\t    `;\n    },\n    extraCssText:\n      'background-color:rgba(0,13,35,0.9);padding:8px 12px;box-shadow: 1px 6px 15px 1px rgba(0,0,0,0.13);border-radius: 4px;filter: blur(undefinedpx);border:none;'\n  },\n  legend: {\n    data: legendData,\n    top: 16,\n    left: 0,\n    itemWidth: 9,\n    itemHeight: 9,\n    itemGap: 16,\n    textStyle: {\n      fontSize: 12,\n      color: '#ABC6F7',\n      fontFamily: 'Source Han Sans CN-Regular',\n      padding: [0, 0, 0, 4]\n    }\n  },\n  grid: {\n    left: '24',\n    right: '24',\n    top: '80',\n    bottom: '24',\n    containLabel: true\n  },\n  xAxis: {\n    type: 'category',\n    data: nameList,\n    axisTick: {\n      show: false //隐藏X轴刻度\n    },\n    axisLine: {\n      lineStyle: {\n        color: 'rgba(62, 102, 181, 1)'\n      }\n    },\n    axisLabel: {\n      show: true,\n      margin: 12,\n      textStyle: {\n        fontSize: 12,\n        color: '#ABC6F7', //X轴文字颜色\n        fontFamily: 'Source Han Sans CN-Regular',\n        fontWeight: 400\n      }\n    }\n  },\n  yAxis: [\n    {\n      boundaryGap: ['0', '20%'],\n      name: yName,\n      nameTextStyle: {\n        fontSize: 12,\n        color: '#ABC6F7', //X轴文字颜色\n        fontFamily: 'Source Han Sans CN-Regular',\n        align: 'left',\n        verticalAlign: 'center'\n      },\n      type: 'value',\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        lineStyle: {\n          type: 'dashed',\n          width: 1,\n          color: '#3E66B5'\n        }\n      },\n      axisLine: {\n        show: false\n      },\n      axisLabel: {\n        show: true,\n        fontSize: 12,\n        color: '#ABC6F7',\n        fontFamily: 'HarmonyOS Sans-Regular'\n      },\n      splitArea: {\n        show: false\n      }\n    },\n    {\n      boundaryGap: ['0', '10%'],\n      position: 'right',\n      max: valueMax + 0.2 * valueMax,\n      type: 'value',\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        show: false\n      },\n      axisLine: {\n        show: false\n      },\n      axisLabel: {\n        show: false\n      },\n      splitArea: {\n        show: false\n      }\n    }\n  ],\n  series: seriesData\n};\n\n// 图例legend改变时\nmyChart.on('legendselectchanged', (params) => {\n  let selectArr = []; // 当前选中数据\n  let lineData = []; // 折线图数据\n  legend.map((item) => {\n    if (params.selected[item]) {\n      selectArr.push(item);\n    }\n  });\n  if (selectArr.length < 2) {\n    lineData = getLineDataSingle();\n  } else {\n    lineData = getLineDataAll();\n  }\n  myChart.setOption({\n    series: [\n      {\n        name: legend[0],\n        data: lineData[0]\n      },\n      {\n        name: legend[1],\n        data: lineData[1]\n      }\n    ]\n  });\n});\n\n// 鼠标移入\nmyChart.on('mouseover', (params) => {\n  const currentIndex = params.dataIndex;\n  myChart.dispatchAction({\n    type: 'downplay',\n    seriesName: legend\n  });\n  myChart.dispatchAction({\n    type: 'highlight',\n    seriesName: legend,\n    dataIndex: currentIndex\n  });\n  myChart.setOption({\n    tooltip: {\n      trigger: 'axis',\n      showContent: true\n    },\n    series: [\n      {\n        name: 'bgBar',\n        data: nameList.map((item, index) => {\n          if (index === currentIndex) {\n            return {\n              value: valueMax + 0.2 * valueMax,\n              itemStyle: {\n                color: 'rgba(57,126,240,0.2)'\n              }\n            };\n          } else {\n            return {\n              value: valueMax + 0.2 * valueMax,\n              itemStyle: {\n                color: 'rgba(57,126,240,0)'\n              }\n            };\n          }\n        })\n      }\n    ]\n  });\n});\n\n// 鼠标移出\nmyChart.on('mouseout', (params) => {\n  myChart.setOption({\n    tooltip: {\n      trigger: 'none',\n      showContent: false\n    },\n    series: [\n      {\n        name: 'bgBar',\n        data: nameList.map((item, index) => {\n          return {\n            value: valueMax + 0.2 * valueMax,\n            itemStyle: {\n              color: 'rgba(57,126,240,0)'\n            }\n          };\n        })\n      }\n    ]\n  });\n});"
  },
  {
    id: "line1",
    name: "到账经费年度趋势",
    type: ["line"],
    date: "2023.12.19",
    exampleImg: line1Img,
    remark: "折线面积图",
    renderer: "svg",
    code: "const nameList = ['2017', '2018', '2019', '2020', '2021'];\nconst valueList = ['81', '65', '76', '84', '49'];\n\noption = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'none'\n    },\n    confine: true,\n    formatter: (params) => {\n      const { name, data } = params[0];\n      return `\n            <div style=\"font-size: 14px;font-family: Source Han Sans CN-Medium;font-weight: 500;color: #FFFFFF;margin-bottom:8px;\">${name}年</div>\n            <div style=\"font-size: 14px;font-family: Source Han Sans CN-Medium;font-weight: 500;color: #FFFFFF;\">到账经费：${data} 万元</div>\n         `;\n    },\n    extraCssText:\n      'opacity: 0.8;background-color:#050F1B;padding:12px;box-shadow: 1px 6px 15px 1px rgba(0,0,0,0.13);border-radius: 4px;filter: blur(undefinedpx);border:none;'\n  },\n  grid: {\n    top: '24', //上边距\n    right: '0', //右边距\n    left: '0', //左边距\n    bottom: '0', //下边距\n    containLabel: true\n  },\n  xAxis: {\n    type: 'category',\n    data: nameList,\n    axisTick: {\n      show: false //隐藏X轴刻度\n    },\n    axisLine: {\n      lineStyle: {\n        color: '#CCCCCC'\n      }\n    },\n    axisLabel: {\n      show: true,\n      textStyle: {\n        color: 'rgba(0,0,0,0.65)',\n        fontSize: 14,\n        fontFamily: 'Source Han Sans CN-Regular'\n      }\n    }\n  },\n  yAxis: [\n    {\n      type: 'value',\n      name: '单位：万元',\n      nameTextStyle: {\n        color: 'rgba(0,0,0,0.65)',\n        fontSize: 14,\n        fontFamily: 'Source Han Sans CN-Regular',\n        align: 'left',\n        verticalAlign: 'center'\n      },\n      axisLabel: {\n        color: 'rgba(0,0,0,0.65)',\n        textStyle: {\n          fontSize: 14\n        }\n      },\n      axisLine: {\n        show: false,\n        lineStyle: {\n          color: 'rgba(223, 223, 223, 1)'\n        }\n      },\n      axisTick: {\n        show: false\n      },\n      splitLine: {\n        lineStyle: {\n          color: 'rgba(223, 223, 223, 1)',\n          type: 'dashed'\n        }\n      }\n    }\n  ],\n  series: [\n    {\n      type: 'line',\n      data: valueList,\n      symbolSize: 8, //标记的大小\n      areaStyle: {\n        color: {\n          type: 'linear',\n          x: 0,\n          y: 0,\n          x2: 0,\n          y2: 1,\n          colorStops: [\n            {\n              offset: 0,\n              color: 'rgba(116,160,249,0.15)'\n              // 0% 处的颜色\n            },\n            {\n              offset: 1,\n              color: 'rgba(29,63,120,0)'\n              // 100% 处的颜色\n            }\n          ],\n          global: false\n          // 缺省为 false\n        }\n      },\n      lineStyle: {\n        color: '#5B8FF9',\n        width: 3,\n        shadowColor: 'rgba(26,117,218,0.17)', //设置折线阴影\n        shadowBlur: 5,\n        shadowOffsetY: 9\n      },\n      itemStyle: {\n        //折线拐点标志的样式\n        color: '#5B8FF9',\n        borderColor: '#5B8FF9',\n        borderWidth: 5\n      },\n      smooth: 0.4,\n      emphasis: {\n        scale: 1.5\n      }\n    }\n  ]\n};"
  },
]